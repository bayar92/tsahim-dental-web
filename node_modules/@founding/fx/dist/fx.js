#!/usr/bin/env node
var $lXyMz$commander = require("commander");
var $lXyMz$foundingdevkit = require("@founding/devkit");
var $lXyMz$path = require("path");
var $lXyMz$tsnode = require("ts-node");
var $lXyMz$got = require("got");
var $lXyMz$tar = require("tar");
var $lXyMz$stream = require("stream");
var $lXyMz$util = require("util");
var $lXyMz$inflection = require("inflection");
var $lXyMz$changecase = require("change-case");
var $lXyMz$frontmatter = require("front-matter");

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}


var $89f175d1dc59150c$exports = {};
$89f175d1dc59150c$exports = JSON.parse("{\"name\":\"@founding/fx\",\"version\":\"0.0.15\",\"keywords\":[],\"description\":\"CLI to add prebuilt features to Fx apps\",\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/FoundingHQ/fx\",\"directory\":\"packages/fx\"},\"author\":\"@FoundingHQ\",\"license\":\"Apache-2.0\",\"source\":\"./src/fx.ts\",\"main\":\"./dist/fx.js\",\"bin\":{\"fx\":\"./dist/fx.js\"},\"files\":[\"dist\"],\"scripts\":{\"cli\":\"ts-node src/fx.ts\",\"cli:prod\":\"node dist/fx\",\"dev\":\"parcel watch -p 1236\",\"clean\":\"rimraf dist\",\"prebuild\":\"npm run clean\",\"build\":\"parcel build\",\"prepublish\":\"npm run build\"},\"dependencies\":{\"@founding/devkit\":\"^0.0.15\",\"async-retry\":\"^1.3.3\",\"change-case\":\"^4.1.2\",\"commander\":\"^8.3.0\",\"front-matter\":\"^4.0.2\",\"got\":\"^11.8.3\",\"inflection\":\"^1.13.1\",\"tar\":\"^6.1.11\",\"ts-node\":\"^10.4.0\",\"typescript\":\"^4.5.4\"},\"devDependencies\":{\"@types/async-retry\":\"^1.4.3\",\"@types/inflection\":\"^1.13.0\",\"@types/node\":\"^16.11.13\",\"@types/tar\":\"^6.1.1\"},\"engines\":{\"node\":\">=14.0.0\"},\"publishConfig\":{\"access\":\"public\"},\"gitHead\":\"9648af05f7afcdfc7e04ad520ad76501203f7b70\"}");






const $d8fbf29a15a1ad00$export$e35a2cc3ba1cba37 = ()=>{
    if (!process[$lXyMz$tsnode.REGISTER_INSTANCE]) $lXyMz$tsnode.register({
        compilerOptions: {
            module: "commonjs"
        },
        transpileOnly: true
    });
};



const $fa1ec454320720c6$var$parseJsonRes = (res)=>JSON.parse(res.body)
;
const $fa1ec454320720c6$export$6a054ecb6ee15d46 = (url)=>($parcel$interopDefault($lXyMz$got))(url).then($fa1ec454320720c6$var$parseJsonRes)
;
const $fa1ec454320720c6$export$d8cc14bc7c69bf14 = (url)=>($parcel$interopDefault($lXyMz$got)).stream(url)
;
const $fa1ec454320720c6$export$c4ea027afed2fe4a = async (url)=>{
    return (await ($parcel$interopDefault($lXyMz$got))(url).catch((e)=>e
    )).statusCode === 200;
};


const $1a8dd01a4475321e$export$29e065ca3939df49 = "https://github.com";
const $1a8dd01a4475321e$export$46ea128448cd5778 = "https://api.github.com/repos";
const $1a8dd01a4475321e$export$8a021a4bb8d650de = "https://raw.githubusercontent.com";
const $1a8dd01a4475321e$export$bc3d89c12cf46b2c = "https://codeload.github.com";
const $1a8dd01a4475321e$export$5f7bb87daeae59c1 = process.cwd();








const $a6169022a0e07463$var$pipeline = $lXyMz$util.promisify($lXyMz$stream.Stream.pipeline);
const $a6169022a0e07463$export$e53f0c1ae91623cc = (root, // foundinghq/fx-template
repoFullName = "foundinghq/fx-template", // main
defaultBranch = "main", //packages/generator
subdirectory = "")=>{
    $lXyMz$foundingdevkit.removeDir(root);
    $lXyMz$foundingdevkit.makeDir(root);
    const repoName = repoFullName.split("/")[1];
    const depth = subdirectory ? subdirectory.split("/").length + 1 : 1;
    const extractPath = subdirectory ? [
        `${repoName}-${defaultBranch}/${subdirectory}`
    ] : [
        `${repoName}-${defaultBranch}`
    ];
    return $a6169022a0e07463$var$pipeline($fa1ec454320720c6$export$d8cc14bc7c69bf14(`${$1a8dd01a4475321e$export$bc3d89c12cf46b2c}/${repoFullName}/tar.gz/${defaultBranch}`), ($parcel$interopDefault($lXyMz$tar)).extract({
        cwd: root,
        strip: depth
    }, extractPath));
};



const $b5f13c23e4665d9e$var$mapPackage = (p)=>{
    if (!p.version) return p.name;
    return `${p.name}@${p.version}`;
};
const $b5f13c23e4665d9e$export$4b3e715f166fdd78 = async (root, dependencies, withStdio = true)=>{
    const originalCwd = process.cwd();
    const useYarn = $b5f13c23e4665d9e$export$83fe80444a94baba();
    let command;
    let args;
    process.chdir(root);
    if (dependencies && dependencies.length) {
        const deps = dependencies.filter((p)=>!p.isDevDep && !p.isExpoDep
        ).map($b5f13c23e4665d9e$var$mapPackage);
        const devDeps = dependencies.filter((p)=>p.isDevDep
        ).map($b5f13c23e4665d9e$var$mapPackage);
        const expoDeps = dependencies.filter((p)=>p.isExpoDep
        ).map($b5f13c23e4665d9e$var$mapPackage);
        if (deps.length) {
            command = useYarn ? "yarnpkg" : "npm";
            args = useYarn ? [
                "add",
                "--exact",
                "--cwd",
                root,
                ...deps
            ] : [
                "install",
                "--save-exact",
                "--save",
                ...deps
            ];
            await $lXyMz$foundingdevkit.exec(command, args, withStdio);
        }
        if (devDeps.length) {
            command = useYarn ? "yarnpkg" : "npm";
            args = useYarn ? [
                "add",
                "--exact",
                "--cwd",
                root,
                ...devDeps
            ] : [
                "install",
                "--save-exact",
                "--save-dev",
                ...devDeps
            ];
            await $lXyMz$foundingdevkit.exec(command, args, withStdio);
        }
        if (expoDeps.length) {
            command = "expo";
            args = [
                "install",
                ...expoDeps
            ];
            await $lXyMz$foundingdevkit.exec(command, args, withStdio);
        }
    } else {
        command = useYarn ? "yarnpkg" : "npm";
        args = useYarn ? [] : [
            "install"
        ];
        await $lXyMz$foundingdevkit.exec(command, args, withStdio);
    }
    process.chdir(originalCwd);
};
const $b5f13c23e4665d9e$export$a846c21fa8a8ce67 = async (root, dependencies, withStdio = true)=>{
    const originalCwd = process.cwd();
    const useYarn = $b5f13c23e4665d9e$export$83fe80444a94baba();
    const command = useYarn ? "yarnpkg" : "npm";
    const args = useYarn ? [
        "remove",
        "--cwd",
        root,
        ...dependencies
    ] : [
        "uninstall",
        ...dependencies
    ];
    process.chdir(root);
    await $lXyMz$foundingdevkit.exec(command, args, withStdio);
    process.chdir(originalCwd);
};
const $b5f13c23e4665d9e$export$83fe80444a94baba = ()=>{
    try {
        const userAgent = process.env.npm_config_user_agent;
        if (userAgent) return Boolean(userAgent && userAgent.startsWith("yarn"));
        if ($lXyMz$foundingdevkit.execSync("yarn", [
            "--version"
        ]).status === 0) return true;
        return false;
    } catch (e) {
        return false;
    }
};


const $cb761e16313facfe$export$5ddd6347460211dd = (feature)=>{
    // feature == `auth`
    const isOfficialGenerator = /^([\w\-_\[\]]*)$/.test(feature);
    // feature == `https://github.com/some-githubuser/my-awesome-generator`
    const isUrlGenerator = feature.startsWith($1a8dd01a4475321e$export$29e065ca3939df49);
    // feature == `some-githubuser/my-awesome-generator`
    const isGitHubShorthandGenerator = /^([\w-_]*)\/([\w-_]*)$/.test(feature);
    if (isOfficialGenerator || isUrlGenerator || isGitHubShorthandGenerator) {
        let repoUrl;
        let subdirectory;
        switch(true){
            case isUrlGenerator:
                repoUrl = feature;
                break;
            case isOfficialGenerator:
                repoUrl = `${$1a8dd01a4475321e$export$29e065ca3939df49}/foundinghq/fx`;
                subdirectory = `generators/${feature}`;
                break;
            case isGitHubShorthandGenerator:
                repoUrl = `${$1a8dd01a4475321e$export$29e065ca3939df49}/${feature}`;
                break;
            default:
                throw new Error("should be impossible, the 3 cases are the only way to get into this switch");
        }
        return {
            feature: feature,
            path: repoUrl,
            subdirectory: subdirectory,
            localRootPath: $lXyMz$path.join($1a8dd01a4475321e$export$5f7bb87daeae59c1, ".fx"),
            localPackageJsonPath: $lXyMz$path.join($1a8dd01a4475321e$export$5f7bb87daeae59c1, ".fx", "package.json"),
            location: $lXyMz$foundingdevkit.GeneratorLocation.Remote
        };
    } else // feature == `./my-awesome-generator.ts`
    return {
        feature: feature,
        path: feature,
        localRootPath: feature.endsWith(".ts") || feature.endsWith(".js") ? $lXyMz$path.dirname(feature) : feature,
        localPackageJsonPath: $lXyMz$path.join($lXyMz$path.dirname(feature), "package.json"),
        location: $lXyMz$foundingdevkit.GeneratorLocation.Local
    };
};
const $cb761e16313facfe$var$skipDependencies = {
    "@founding/devkit": true
};
const $cb761e16313facfe$export$69a89097920e6eed = async (generatorMeta)=>{
    // Since the generator may be a .ts file, we need to setup a tsnode runtime
    $d8fbf29a15a1ad00$export$e35a2cc3ba1cba37();
    if (generatorMeta.location === $lXyMz$foundingdevkit.GeneratorLocation.Remote) {
        const apiUrl = generatorMeta.path.replace($1a8dd01a4475321e$export$29e065ca3939df49, $1a8dd01a4475321e$export$46ea128448cd5778);
        const rawUrl = generatorMeta.path.replace($1a8dd01a4475321e$export$29e065ca3939df49, $1a8dd01a4475321e$export$8a021a4bb8d650de);
        const repoInfo = await $fa1ec454320720c6$export$6a054ecb6ee15d46(apiUrl);
        const packageJsonPath = $lXyMz$path.join(`${rawUrl}`, repoInfo.default_branch, generatorMeta.subdirectory ?? "", "package.json");
        if (!await $fa1ec454320720c6$export$c4ea027afed2fe4a(packageJsonPath)) {
            $lXyMz$foundingdevkit.logger.error(`Could not find generator for "${generatorMeta.feature}"\n`);
            $lXyMz$foundingdevkit.logger.title("Please provide one of the following:");
            $lXyMz$foundingdevkit.logger.log(`1. The name of a feature to install (e.g. "auth")`);
            $lXyMz$foundingdevkit.logger.meta("- Available generators listed at https://github.com/foundinghq/fx/tree/main/generators");
            $lXyMz$foundingdevkit.logger.log(`2. The full name of a GitHub repository (e.g. "foundinghq/example-generator")`);
            $lXyMz$foundingdevkit.logger.log(`3. A full URL to a Github repository (e.g. "https://github.com/foundinghq/example-generator"), or`);
            $lXyMz$foundingdevkit.logger.log(`4. A file path to a locally-written generator.`, 0, true);
            process.exit(1);
        } else {
            const tempDir = generatorMeta.localRootPath;
            await $a6169022a0e07463$export$e53f0c1ae91623cc(tempDir, repoInfo.full_name, repoInfo.default_branch, generatorMeta.subdirectory);
            const generatorPackageJson = $lXyMz$foundingdevkit.readJson(generatorMeta.localPackageJsonPath);
            if (!generatorPackageJson.main) {
                $lXyMz$foundingdevkit.logger.error(`Failed to run generator: package.json must have a "main" field that points to the generator module`);
                process.exit(1);
            }
            // Since the generator lives inside the project subdirectory (.fx folder),
            // we only need to install dependencies that the project doesnt have.
            if (generatorPackageJson.dependencies || generatorPackageJson.devDependencies) {
                const projectPackageJson = $lXyMz$foundingdevkit.readJson($lXyMz$path.join($1a8dd01a4475321e$export$5f7bb87daeae59c1, "package.json"));
                const allProjectDependencies = [
                    ...Object.keys(projectPackageJson.dependencies || {
                    }),
                    ...Object.keys(projectPackageJson.devDependencies || {
                    }), 
                ];
                const allGeneratorDependencies = [
                    ...Object.keys(generatorPackageJson.dependencies || {
                    }),
                    ...Object.keys(generatorPackageJson.devDependencies || {
                    }), 
                ];
                const difference = allGeneratorDependencies.filter((d)=>!$cb761e16313facfe$var$skipDependencies[d]
                ).filter((d)=>!allProjectDependencies.includes(d)
                );
                if (difference.length > 0) await $b5f13c23e4665d9e$export$4b3e715f166fdd78(tempDir, difference.map((d)=>({
                        name: d
                    })
                ), false);
            }
            const generatorEntry = $lXyMz$path.resolve(tempDir, generatorPackageJson.main);
            const generator = require(generatorEntry).default;
            return {
                generator: generator,
                packageJson: generatorPackageJson
            };
        }
    } else {
        const generatorEntry = $lXyMz$path.resolve($1a8dd01a4475321e$export$5f7bb87daeae59c1, generatorMeta.path);
        const generator = require(generatorEntry).default;
        return {
            generator: generator,
            packageJson: {
            }
        };
    }
};










const $95ceb83468e74f55$var$helpers = {
    pluralizedCamelCase: (s)=>$lXyMz$changecase.camelCase($lXyMz$inflection.pluralize(s))
    ,
    capitalize: (s)=>s.charAt(0).toUpperCase() + s.slice(1)
    ,
    inflection: $lXyMz$inflection,
    changeCase: $lXyMz$changecase
};
const $95ceb83468e74f55$export$fd42f52fd3ae1109 = ()=>{
    // Context is currently hardcoded but should be configurable with
    // `fx.config.js`
    const context = {
        props: {
        },
        paths: {
            root: $1a8dd01a4475321e$export$5f7bb87daeae59c1,
            env: $lXyMz$path.resolve($1a8dd01a4475321e$export$5f7bb87daeae59c1, ".env"),
            envExample: $lXyMz$path.resolve($1a8dd01a4475321e$export$5f7bb87daeae59c1, ".env.example"),
            fxConfig: $lXyMz$path.resolve($1a8dd01a4475321e$export$5f7bb87daeae59c1, "fx.config.js"),
            tsConfig: $lXyMz$path.resolve($1a8dd01a4475321e$export$5f7bb87daeae59c1, "tsconfig.json"),
            packageJson: $lXyMz$path.resolve($1a8dd01a4475321e$export$5f7bb87daeae59c1, "package.json"),
            scheme: $lXyMz$path.resolve($1a8dd01a4475321e$export$5f7bb87daeae59c1, "prisma/schema.prisma"),
            lib: $lXyMz$path.resolve($1a8dd01a4475321e$export$5f7bb87daeae59c1, "lib"),
            libCore: $lXyMz$path.resolve($1a8dd01a4475321e$export$5f7bb87daeae59c1, "lib/core"),
            mobile: $lXyMz$path.resolve($1a8dd01a4475321e$export$5f7bb87daeae59c1, "expo"),
            appJson: $lXyMz$path.resolve($1a8dd01a4475321e$export$5f7bb87daeae59c1, "app.json"),
            pages: $lXyMz$path.resolve($1a8dd01a4475321e$export$5f7bb87daeae59c1, "pages"),
            api: $lXyMz$path.resolve($1a8dd01a4475321e$export$5f7bb87daeae59c1, "pages/api")
        },
        config: {
            frameworks: $95ceb83468e74f55$export$60db69da98760aaa(),
            language: $95ceb83468e74f55$export$64783e31db14f0ba(),
            theme: $95ceb83468e74f55$export$89cbf1a0881c8b9c()
        },
        helpers: $95ceb83468e74f55$var$helpers,
        // alias
        h: $95ceb83468e74f55$var$helpers,
        p: {
        }
    };
    return context;
};
const $95ceb83468e74f55$export$60db69da98760aaa = ()=>{
    const frameworks = [];
    const packageJson = $lXyMz$foundingdevkit.readJson($lXyMz$path.resolve($1a8dd01a4475321e$export$5f7bb87daeae59c1, "package.json"));
    if (packageJson["dependencies"]["next"]) frameworks.push("next");
    if (packageJson["dependencies"]["expo"]) frameworks.push("expo");
    return frameworks;
};
const $95ceb83468e74f55$export$64783e31db14f0ba = ()=>{
    const language = $lXyMz$foundingdevkit.fileExists($lXyMz$path.resolve($1a8dd01a4475321e$export$5f7bb87daeae59c1, "tsconfig.json")) ? "typescript" : "javascript";
    return language;
};
const $95ceb83468e74f55$export$89cbf1a0881c8b9c = ()=>{
    const theme = "pico";
    return theme;
};
const $95ceb83468e74f55$export$89e29e4ab65e70a9 = (path, obj = {
})=>{
    const keys = Object.keys(obj);
    const func = Function(...keys, "return `" + path + "`;");
    return func(...keys.map((k)=>obj[k]
    ));
};
const $95ceb83468e74f55$export$a2eae0aae116175e = (path)=>{
    if (path.split(".").length > 2 && path.endsWith(".ejs")) return path.slice(0, -4);
    return path;
};
const $95ceb83468e74f55$export$fabc6164d01d071f = (source)=>{
    const defaultAttributes = {
        force: false,
        filter: true,
        inject: false,
        append: false
    };
    const { attributes: attributes , body: body  } = ($parcel$interopDefault($lXyMz$frontmatter))(source);
    return {
        attributes: {
            ...defaultAttributes,
            ...attributes
        },
        body: body
    };
};



const $2b9497074cc7fe39$var$executeSetupGenerator = async (generator, generatorOptions = {
}, generatorMeta)=>{
    const context = $95ceb83468e74f55$export$fd42f52fd3ae1109();
    context.generatorMeta = generatorMeta;
    // Setup generator to assign props to the context
    const props = await generator.setup(context, generatorOptions);
    context.props = props;
    context.p = props;
    return context;
};
const $2b9497074cc7fe39$var$executeInstallDependencies = async (generator, context, dryRun)=>{
    $lXyMz$foundingdevkit.logger.log("Installing dependencies:");
    const dependencies = await generator.install(context);
    if (!dependencies || !dependencies.length) {
        $lXyMz$foundingdevkit.logger.success("No dependencies to install");
        $lXyMz$foundingdevkit.logger.newLine();
        return;
    }
    $lXyMz$foundingdevkit.logger.list(dependencies.map((d)=>$lXyMz$foundingdevkit.logger.withCommand(d.name)
    ));
    if (dryRun) {
        $lXyMz$foundingdevkit.logger.newLine();
        $lXyMz$foundingdevkit.logger.warning("Dry run, skipping installation");
    } else {
        const spinner = $lXyMz$foundingdevkit.logger.spinner("Installing dependencies");
        await $b5f13c23e4665d9e$export$4b3e715f166fdd78(context.paths.root, dependencies, false);
        spinner.succeed("Dependencies installed");
    }
    $lXyMz$foundingdevkit.logger.success("No dependencies to install");
    $lXyMz$foundingdevkit.logger.newLine();
};
const $2b9497074cc7fe39$var$executeScaffolds = async (generator, context, generatorMeta, force)=>{
    $lXyMz$foundingdevkit.logger.log("Generating feature source code:");
    const scaffoldPaths = await generator.scaffold(context);
    const destFilePaths = [];
    const skippedFiles = [];
    if (!scaffoldPaths || !scaffoldPaths.length) {
        $lXyMz$foundingdevkit.logger.success("No files to generate");
        $lXyMz$foundingdevkit.logger.newLine();
        return;
    }
    for (const scaffoldPath of scaffoldPaths){
        const srcFilePaths = await $lXyMz$foundingdevkit.getFilePaths($lXyMz$path.resolve(generatorMeta.localRootPath, scaffoldPath.src));
        for (const srcFilePath of srcFilePaths){
            // srcFilePath = /projects/founding/fx/generators/auth/templates/lib/users/api/accountService.ts.ejs
            const path = $lXyMz$path.extname(scaffoldPath.dest) ? scaffoldPath.dest : scaffoldPath.dest + $95ceb83468e74f55$export$a2eae0aae116175e(srcFilePath).replace($lXyMz$path.resolve(generatorMeta.localRootPath) + "/", "") // /Users/kaiyuhsu/Documents/projects/founding/fx/generators/auth
            .replace(scaffoldPath.src + "/", ""); // templates/next
            const destFilePath = $lXyMz$path.resolve(context.paths.root, $95ceb83468e74f55$export$89e29e4ab65e70a9(path, context));
            const readableDestFilePath = destFilePath.replace(context.paths.root, "");
            // Transform source file and read metadata
            const { attributes: attributes , body: body  } = $95ceb83468e74f55$export$fabc6164d01d071f(await $lXyMz$foundingdevkit.runTransforms({
                src: srcFilePath
            }, [
                $lXyMz$foundingdevkit.transformEjs,
                context, 
            ]));
            const source = await $lXyMz$foundingdevkit.transformPrettier(destFilePath)(body);
            if (attributes.filter) try {
                $lXyMz$foundingdevkit.writeFile(destFilePath, source, {
                    force: force || attributes.force,
                    append: attributes.inject && attributes.append
                });
                destFilePaths.push(readableDestFilePath);
            } catch  {
                const res = await $lXyMz$foundingdevkit.prompts({
                    type: "confirm",
                    name: "force",
                    message: `${readableDestFilePath} file already exists, would you like to overwrite it?`,
                    initial: true
                });
                if (res.force) {
                    $lXyMz$foundingdevkit.writeFile(destFilePath, source, {
                        force: true
                    });
                    destFilePaths.push(readableDestFilePath);
                } else skippedFiles.push(readableDestFilePath);
            }
        }
    }
    destFilePaths.length && $lXyMz$foundingdevkit.logger.list(destFilePaths.map((f)=>`Generated ${$lXyMz$foundingdevkit.logger.withCommand(f)}`
    ));
    skippedFiles.length && $lXyMz$foundingdevkit.logger.list(skippedFiles.map((f)=>$lXyMz$foundingdevkit.logger.withWarning(`Skipped generation of ${f}`)
    ));
    $lXyMz$foundingdevkit.logger.success("Source files generated");
    $lXyMz$foundingdevkit.logger.newLine();
};
const $2b9497074cc7fe39$var$executeCodemods = async (generator, context)=>{
    $lXyMz$foundingdevkit.logger.log("Running codemods:");
    const filesModified = await generator.codemods(context);
    if (!filesModified || !filesModified.length) {
        $lXyMz$foundingdevkit.logger.success("No codemods to run");
        $lXyMz$foundingdevkit.logger.newLine();
        return;
    }
    $lXyMz$foundingdevkit.logger.list(filesModified.map((f)=>`Modified ${$lXyMz$foundingdevkit.logger.withCommand(f.replace(context.paths.root, ""))}`
    ));
    $lXyMz$foundingdevkit.logger.success("File modifications made in order to integrate directly into your source code");
    $lXyMz$foundingdevkit.logger.newLine();
};
const $2b9497074cc7fe39$var$executeFinish = async (generator, context)=>{
    await generator.finish(context);
};
const $2b9497074cc7fe39$export$cf638731fd752467 = async (generatorMeta, generator, generatorOptions = {
}, cliOptions = {
})=>{
    const dryRun = cliOptions.dryRun || false;
    const force = cliOptions.force || false;
    const context = await $2b9497074cc7fe39$var$executeSetupGenerator(generator, generatorOptions, generatorMeta);
    try {
        await $2b9497074cc7fe39$var$executeInstallDependencies(generator, context, dryRun);
        await $2b9497074cc7fe39$var$executeScaffolds(generator, context, generatorMeta, force);
        await $2b9497074cc7fe39$var$executeCodemods(generator, context);
    } catch (error) {
        $lXyMz$foundingdevkit.throwHandledError({
            command: "executeGenerator",
            message: `Error running execution step`,
            error: error
        });
    }
    await $2b9497074cc7fe39$var$executeFinish(generator, context);
};



const $36d83307b80c5c07$export$2cd8252107eb640b = async (options = {
})=>{
    const spinner = $lXyMz$foundingdevkit.logger.spinner(`Initializing FX for your project`);
    const generatorMeta = $cb761e16313facfe$export$5ddd6347460211dd(options.path || "init[dev]");
    const frameworks = $95ceb83468e74f55$export$60db69da98760aaa();
    if (frameworks.length === 0 || !frameworks.includes("next")) $lXyMz$foundingdevkit.throwHandledError({
        command: "init",
        message: `FX currently does not support the framework your project is running on`
    });
    const { generator: generator  } = await $cb761e16313facfe$export$69a89097920e6eed(generatorMeta);
    spinner.succeed(`Framework${frameworks.length ? "s" : ""} detected: ${frameworks.join(", ")}`);
    $lXyMz$foundingdevkit.logger.success(`Converting project to be FX compatible`);
    $lXyMz$foundingdevkit.logger.newLine();
    await $2b9497074cc7fe39$export$cf638731fd752467(generatorMeta, generator, {
    }, options);
    if (generatorMeta.location === $lXyMz$foundingdevkit.GeneratorLocation.Remote) $lXyMz$foundingdevkit.removeDir(generatorMeta.localRootPath);
    $lXyMz$foundingdevkit.logger.success(`${$lXyMz$foundingdevkit.logger.withVariable("Success!")} Your project is now compatible with FX features`);
    $lXyMz$foundingdevkit.logger.newLine();
    $lXyMz$foundingdevkit.logger.log(`You can add features to your project with:`);
    $lXyMz$foundingdevkit.logger.log($lXyMz$foundingdevkit.logger.withCommand(`npx fx add <feature>`), 1);
    $lXyMz$foundingdevkit.logger.newLine();
};





const $c7d34a9bbd79d7bc$export$7bc8aedf51d4a4ec = async ()=>{
    // TODO: Allow you to pass a local directory to search for generators
    const res = await Promise.all([
        $fa1ec454320720c6$export$6a054ecb6ee15d46(`${$1a8dd01a4475321e$export$46ea128448cd5778}/foundinghq/fx/git/trees/main?recursive=1`), 
    ]);
    const [publicGenerators, _privateGenerators] = res;
    // const list = publicGenerators.tree.concat(privateGenerators.tree);
    const list = publicGenerators.tree;
    return list.reduce((generatorList, item)=>{
        const filePath = item.path.split("/");
        const [directory, generatorName] = filePath;
        if (directory === "generators" && filePath.length === 2 && item.type === "tree" && !generatorName.includes("[dev]")) generatorList.push(generatorName);
        return generatorList;
    }, []);
};


const $82b062352536a8f7$export$8837f4fc672e936d = async ()=>{
    const spinner = $lXyMz$foundingdevkit.logger.spinner(`Loading feature list`);
    const featureList = await $c7d34a9bbd79d7bc$export$7bc8aedf51d4a4ec();
    spinner.stop();
    $lXyMz$foundingdevkit.logger.title(`Available FX features:`);
    $lXyMz$foundingdevkit.logger.list(featureList);
    $lXyMz$foundingdevkit.logger.newLine();
    $lXyMz$foundingdevkit.logger.log(`You can add features to your project with:`);
    $lXyMz$foundingdevkit.logger.log($lXyMz$foundingdevkit.logger.withCommand(`npx fx add <feature>`), 1);
    $lXyMz$foundingdevkit.logger.newLine();
};






const $5c70756639ce2e84$export$7300a92932ee17a3 = (args)=>{
    return args.filter((arg)=>!arg.startsWith("--")
    ).reduce((acc, arg)=>{
        const [key, value] = arg.split("=");
        // Allow for duplicate keys, they will be merged as an array
        if (acc[key]) {
            if (Array.isArray(acc[key])) acc[key].push(value);
            else acc[key] = [
                acc[key],
                value
            ];
        } else // If the key is not already set, set it as a json
        acc[key] = value ? JSON.parse(`"${value}"`) : true;
        return acc;
    }, {
    });
};


const $d2865be1d12dab9d$export$e16d8520af44a096 = async (feature = "", args = [], options = {
})=>{
    // Prompt user for the generator to add if they didn't specify one
    if (!feature) {
        const officialFeatures = await $c7d34a9bbd79d7bc$export$7bc8aedf51d4a4ec();
        const res = await $lXyMz$foundingdevkit.prompts({
            type: "select",
            name: "feature",
            message: "What feature would you like to add?",
            initial: 0,
            choices: officialFeatures.map((fname)=>({
                    title: fname,
                    value: fname
                })
            )
        });
        if (res.feature) {
            feature = res.feature;
            $lXyMz$foundingdevkit.logger.newLine();
        }
    }
    if (feature.length === 0) {
        $lXyMz$foundingdevkit.logger.newLine();
        $lXyMz$foundingdevkit.logger.log("Please specify the feature to add:");
        $lXyMz$foundingdevkit.logger.log(`${$lXyMz$foundingdevkit.logger.withCommand("npx fx add")} ${$lXyMz$foundingdevkit.logger.withVariable("[feature]")}`, 1);
        $lXyMz$foundingdevkit.logger.newLine();
        $lXyMz$foundingdevkit.logger.log("For example:");
        $lXyMz$foundingdevkit.logger.log(`${$lXyMz$foundingdevkit.logger.withCommand("npx fx add")} ${$lXyMz$foundingdevkit.logger.withVariable("auth")}`, 1);
        $lXyMz$foundingdevkit.logger.newLine();
        $lXyMz$foundingdevkit.logger.log(`Run ${$lXyMz$foundingdevkit.logger.withCommand(`npx fx add --help`)} to see all options.`);
        process.exit(1);
    }
    /**
   *  Parse additional arguments from the command line:
   * `fx add example --dry-run scope=a lame --test`
   * => { scope: 'a', lame: true }
   **/ const generatorOptions = $5c70756639ce2e84$export$7300a92932ee17a3(args);
    const generatorMeta = $cb761e16313facfe$export$5ddd6347460211dd(feature);
    /**
   * Extract the generator from either:
   * - an official generator (e.g. auth)
   * - GitHub repository (e.g. "foundinghq/example-generator")
   * - Full url Github repository (e.g. "https://github.com/foundinghq/example-generator")
   * - A local file path (e.g. "./generators/example")
   *
   * The extracted generator is placed in a temporary directory (if remote)
   **/ const generatorName = $lXyMz$foundingdevkit.logger.withVariable(feature);
    const spinner = $lXyMz$foundingdevkit.logger.spinner(`Installing ${generatorName} generator`);
    const { generator: generator  } = await $cb761e16313facfe$export$69a89097920e6eed(generatorMeta);
    spinner.succeed(`Generator installed`);
    $lXyMz$foundingdevkit.logger.success(`Running ${generatorName} generator`);
    $lXyMz$foundingdevkit.logger.newLine();
    await $2b9497074cc7fe39$export$cf638731fd752467(generatorMeta, generator, generatorOptions, options);
    if (generatorMeta.location === $lXyMz$foundingdevkit.GeneratorLocation.Remote) // Remove the temporary directory if cloned from a remote generator
    $lXyMz$foundingdevkit.removeDir(generatorMeta.localRootPath);
    $lXyMz$foundingdevkit.logger.success(`${$lXyMz$foundingdevkit.logger.withVariable("Success!")} Your ${$lXyMz$foundingdevkit.logger.withVariable(feature)} feature has been scaffolded.`);
    $lXyMz$foundingdevkit.logger.newLine();
};





const $26800a1ff52e9ae2$export$cd7f480d6b8286c3 = async (feature = "", options = {
})=>{
    if (!feature) {
        const officialFeatures = await $c7d34a9bbd79d7bc$export$7bc8aedf51d4a4ec();
        const res = await $lXyMz$foundingdevkit.prompts({
            type: "select",
            name: "feature",
            message: "What feature would you like to remove?",
            initial: 0,
            choices: officialFeatures.map((fname)=>({
                    title: fname,
                    value: fname
                })
            )
        });
        if (res.feature && res.feature.length > 0) {
            feature = res.feature;
            $lXyMz$foundingdevkit.logger.newLine();
        }
    }
    if (feature.length === 0) {
        $lXyMz$foundingdevkit.logger.newLine();
        $lXyMz$foundingdevkit.logger.log("Please specify the feature to remove:");
        $lXyMz$foundingdevkit.logger.log(`${$lXyMz$foundingdevkit.logger.withCommand("npx fx remove")} ${$lXyMz$foundingdevkit.logger.withVariable("[feature]")}`, 1);
        $lXyMz$foundingdevkit.logger.newLine();
        $lXyMz$foundingdevkit.logger.log("For example:");
        $lXyMz$foundingdevkit.logger.log(`${$lXyMz$foundingdevkit.logger.withCommand("npx fx remove")} ${$lXyMz$foundingdevkit.logger.withVariable("auth")}`, 1);
        $lXyMz$foundingdevkit.logger.newLine();
        $lXyMz$foundingdevkit.logger.log(`Run ${$lXyMz$foundingdevkit.logger.withCommand(`npx fx remove --help`)} to see all options.`);
        process.exit(1);
    }
    const spinner = $lXyMz$foundingdevkit.logger.spinner(`Removing ${feature} feature from project`);
    const dryRun = options.dryRun || false;
    const generatorMeta = $cb761e16313facfe$export$5ddd6347460211dd(feature);
    if (generatorMeta.location === $lXyMz$foundingdevkit.GeneratorLocation.Remote) $lXyMz$foundingdevkit.removeDir(generatorMeta.localRootPath);
    const { generator: generator  } = await $cb761e16313facfe$export$69a89097920e6eed(generatorMeta);
    const { dependencies: dependencies , templates: templates  } = await generator.uninstall();
    spinner.stop();
    if (dependencies.length) try {
        $lXyMz$foundingdevkit.logger.log("Uninstalling dependencies:");
        $lXyMz$foundingdevkit.logger.log(dependencies.map((d)=>$lXyMz$foundingdevkit.logger.withCaret(d)
        ).join("\n"));
        if (dryRun) $lXyMz$foundingdevkit.logger.warning("Dry run: skipping uninstall");
        else {
            spinner.start("Uninstalling dependencies");
            await $lXyMz$foundingdevkit.uninstall(process.cwd(), dependencies, false);
            spinner.stop();
        }
        $lXyMz$foundingdevkit.logger.newLine();
    } catch (error) {
        $lXyMz$foundingdevkit.logger.error("Error uninstalling dependencies:");
        $lXyMz$foundingdevkit.logger.error(error);
    }
    else {
        $lXyMz$foundingdevkit.logger.success(`No dependencies to uninstall`);
        $lXyMz$foundingdevkit.logger.newLine();
    }
    if (templates.length) try {
        $lXyMz$foundingdevkit.logger.log("Removing feature source code:");
        $lXyMz$foundingdevkit.logger.log(templates.map((t)=>$lXyMz$foundingdevkit.logger.withCaret(t)
        ).join("\n"));
        if (dryRun) $lXyMz$foundingdevkit.logger.warning("Dry run: skipping source removal");
        else {
            spinner.start("Removing feature source code");
            for (const path of templates)$lXyMz$foundingdevkit.removeDir(path);
            spinner.stop();
        }
        $lXyMz$foundingdevkit.logger.newLine();
    } catch (error1) {
        $lXyMz$foundingdevkit.logger.error("Error removing files:");
        $lXyMz$foundingdevkit.logger.error(error1);
    }
    else {
        $lXyMz$foundingdevkit.logger.success("No source code to remove");
        $lXyMz$foundingdevkit.logger.newLine();
    }
    if (generatorMeta.location === $lXyMz$foundingdevkit.GeneratorLocation.Remote) $lXyMz$foundingdevkit.removeDir(generatorMeta.localRootPath);
    $lXyMz$foundingdevkit.logger.warning(`Removing features can be risky when features depend on one another. Changes and codemods ran on your source code have not been reverted. Please refer back to the commit where you installed a feature and manually check the diff.`);
    $lXyMz$foundingdevkit.logger.newLine();
    spinner.succeed(`${$lXyMz$foundingdevkit.logger.withVariable("Success!")} Feature successfully removed`);
    $lXyMz$foundingdevkit.logger.newLine();
};


const $b4bd5109a69630eb$export$f5ab8217e0edff04 = async (presetName)=>{
    console.log(`Bootstrapping preset: ${presetName}`);
};


const $2336e0a332ca7a57$var$program = new $lXyMz$commander.Command();
const $2336e0a332ca7a57$var$main = async ()=>{
    $2336e0a332ca7a57$var$program.version((/*@__PURE__*/$parcel$interopDefault($89f175d1dc59150c$exports)).version).description("CLI tool to add/remove prebuilt features to a Next.js project").showSuggestionAfterError();
    $2336e0a332ca7a57$var$program.command("init").description("Converts a project to be compatible with FX features").option("-n, --dry-run", "Print outputs of initializing without running the command").option("-p, --path <path>", "Path to a custom generator to run for initializing").allowUnknownOption().action($36d83307b80c5c07$export$2cd8252107eb640b);
    $2336e0a332ca7a57$var$program.command("list").description("List all available features to add").allowUnknownOption().action($82b062352536a8f7$export$8837f4fc672e936d);
    $2336e0a332ca7a57$var$program.command("add").description("Add a new feature to the project").argument("[feature]", $lXyMz$foundingdevkit.logger.withMeta(`Your Feature to could be:
- An official feature generator (e.g. auth)
- Link to GitHub repository (e.g. "foundinghq/example-generator")
- Full url of a Github repository (e.g. "https://github.com/foundinghq/example-generator")
- A local generator path (e.g. "./generators/example")

If no feature is specified, the list of available features will be displayed.\n`)).argument("[generatorProps...]", $lXyMz$foundingdevkit.logger.withMeta(`A list of properties to pass to the generator. These come in the form of key=value pairs.`)).option("-n, --dry-run", "Print outputs of adding a feature without running the command").allowUnknownOption().action($d2865be1d12dab9d$export$e16d8520af44a096);
    $2336e0a332ca7a57$var$program.command("remove").description("Remove a feature from the project").argument("[feature]", $lXyMz$foundingdevkit.logger.withMeta(`A feature you've previously added to the project that you now want to revert. Reverting a feature will remove all files generated by the feature but will not undo codemod changes.`)).option("-n, --dry-run", "Print outputs of removing a feature without running the command").allowUnknownOption().action($26800a1ff52e9ae2$export$cd7f480d6b8286c3);
    $2336e0a332ca7a57$var$program.command("preset").description("Bootstrap a preset").argument("[preset]", $lXyMz$foundingdevkit.logger.withMeta(`Presets act as sharable set of features that can be used to quickly get a project up and running.`)).option("-n, --dry-run", "Print outputs of executing a preset without running the command").allowUnknownOption().action($b4bd5109a69630eb$export$f5ab8217e0edff04);
    try {
        await $2336e0a332ca7a57$var$program.parseAsync(process.argv);
        await $lXyMz$foundingdevkit.checkAndNotifyUpdates((/*@__PURE__*/$parcel$interopDefault($89f175d1dc59150c$exports)));
    } catch (reason) {
        $lXyMz$foundingdevkit.logger.newLine();
        if (reason.command) {
            $lXyMz$foundingdevkit.logger.error(`${$lXyMz$foundingdevkit.logger.withCommand(reason.command)} command failed.`);
            if (reason.message) $lXyMz$foundingdevkit.logger.error(reason.message);
        } else {
            $lXyMz$foundingdevkit.logger.error("Unexpected error. Please report it as a bug:");
            console.error(reason);
        }
        await $lXyMz$foundingdevkit.checkAndNotifyUpdates((/*@__PURE__*/$parcel$interopDefault($89f175d1dc59150c$exports)));
        process.exit(1);
    }
};
$2336e0a332ca7a57$var$main();


//# sourceMappingURL=fx.js.map
