(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.generateColors = {}));
}(this, (function (exports) { 'use strict';

  /**
   * Get the Hue from RGB
   * @param {Integer} r - red value [0- 255]
   * @param {Integer} g - red value [0- 255]
   * @param {Integer} b - red value [0- 255]
   * @return {Integer} - hue - 0 - 360
   */
  function getHueFromRgb(r, g, b) {
    const M = Math.max(r, g, b);
    const m = Math.min(r, g, b);
    const c = M - m;
    let hx = 0;
    if (c === 0) {
      hx = 0;
    } else if (M === r) {
      hx = ((g - b) / c) % 6;
    } else if (M === g) {
      hx = (b - r) / c + 2;
    } else if (M === b) {
      hx = (r - g) / c + 4;
    }
    hx = hx * 60;
    if (hx < 0) {
      hx = hx + 360;
    }
    return Math.round(hx)
  }

  /**
   * Convert rgb to HSV
   * @param {number} r - red value [0- 255]
   * @param {number} g - red value [0- 255]
   * @param {number} b - red value [0- 255]
   * @return {[hue: number, saturation: number, value: number]} hsv - [h, s, v]
   */
  function rgbToHsv(r, g, b) {
    r = r / 255;
    g = g / 255;
    b = b / 255;
    const M = Math.max(r, g, b);
    const m = Math.min(r, g, b);
    const c = M - m;
    let sat = 0;
    if (M !== 0) {
      sat = (c / M) * 100;
    }
    const hue = getHueFromRgb(r, g, b);
    const v = Math.max(r, g, b) * 100;
    return [hue, Math.round(sat), Math.round(v)]
  }

  /**
   * Converts HSV to RGB value.
   *
   * @param {number} h Hue as a value between 0 - 360 degrees
   * @param {number} s Saturation as a value between 0 - 100%
   * @param {number} v Value as a value between 0 - 100%
   * @returns {[red: number, green: number, blue: number]} The RGB values  EG: [r,g,b], [255,255,255]
   */

  function hsvToRgb(h, s, v) {
    v = v / 100;
    s = s / 100;
    const c = v * s;
    const hx = h / 60;
    const x = c * (1 - Math.abs((hx % 2) - 1));
    let rgb = [0, 0, 0];
    if (!h) {
      rgb = [0, 0, 0];
    } else if (hx >= 0 && hx <= 1) {
      rgb = [c, x, 0];
    } else if (hx >= 1 && hx <= 2) {
      rgb = [x, c, 0];
    } else if (hx >= 2 && hx <= 3) {
      rgb = [0, c, x];
    } else if (hx >= 3 && hx <= 3) {
      rgb = [0, x, c];
    } else if (hx >= 4 && hx <= 5) {
      rgb = [x, 0, c];
    } else {
      rgb = [c, 0, x];
    }
    const m = v - c;
    return rgb.map((c) => Math.round((c + m) * 256))
  }

  const defaultOptions = {
    contrast: 35,
  };

  function getColorForString(str = "", options = {}) {
    options = Object.assign({}, defaultOptions, options);
    const letters = str.split("");
    // get the hash
    const hash = letters.reduce((hash, l) => {
      const val = l.charCodeAt();
      return val * val * val * val + hash
    }, 0);
    // int to rgb
    const c = (hash & 0x00ffffff).toString(16).toUpperCase();
    const hex = "000000".substring(0, 6 - c.length) + c;
    const int = parseInt(hex, 16);
    const r = (int >> 16) & 255;
    const g = (int >> 8) & 255;
    const b = int & 255;

    const [hue, sat, val] = rgbToHsv(r, g, b);
    let brightness = Math.min(val, 35);
    if (options.brightness !== undefined) {
      brightness = options.brightness;
    } else if (options.contrast !== undefined) {
      // this is to ensure backward compatibility
      // options.contrast has been deprecated
      brightness = Math.min(val, options.contrast);
    }
    if (typeof brightness === "function") {
      brightness = brightness(Math.min(val, 35));
    }
    let saturation = sat;
    if (options.saturation !== undefined) {
      saturation = options.saturation;
    }
    if (typeof saturation === "function") {
      saturation = saturation(sat);
    }
    const rgb = hsvToRgb(hue, saturation, brightness);
    return rgb
  }

  function makeGetColorForOptions(options = {}) {
    // cache the calculated colors
    let colorForString = {
      "": [0, 0, 0],
    };
    return function generateColors(str = "") {
      const cacheKey = str;
      if (colorForString[cacheKey]) {
        return colorForString[cacheKey] || [0, 0, 0]
      }
      if (!str) {
        return colorForString[cacheKey] || [0, 0, 0]
      }
      const rgb = getColorForString(str, options);
      colorForString[cacheKey] = rgb;
      return rgb
    }
  }

  exports.getColorForString = getColorForString;
  exports.makeGetColorForOptions = makeGetColorForOptions;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
