
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.11.0
 * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
 */
Prisma.prismaVersion = {
  client: "4.11.0",
  engine: "8fde8fef4033376662cad983758335009d522acb"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AccountScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refreshToken: 'refreshToken',
  accessToken: 'accessToken',
  tokenType: 'tokenType',
  expiresAt: 'expiresAt',
  scope: 'scope',
  idToken: 'idToken',
  sessionState: 'sessionState',
  oauthTokenSecret: 'oauthTokenSecret',
  oauthToken: 'oauthToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.DatabaseConnectionScalarFieldEnum = makeEnum({
  id: 'id',
  connectionName: 'connectionName',
  connectionType: 'connectionType',
  host: 'host',
  port: 'port',
  databaseName: 'databaseName',
  username: 'username',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  hospitalId: 'hospitalId'
});

exports.Prisma.FileUploadScalarFieldEnum = makeEnum({
  id: 'id',
  fileGroup: 'fileGroup',
  fileLink: 'fileLink',
  fileSource: 'fileSource',
  removedAt: 'removedAt',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  fileCategory: 'fileCategory',
  fileSourceDate: 'fileSourceDate',
  fileMIMEType: 'fileMIMEType'
});

exports.Prisma.FirebaseTokenScalarFieldEnum = makeEnum({
  id: 'id',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.FreeTrialScalarFieldEnum = makeEnum({
  id: 'id',
  hospitalName: 'hospitalName',
  phoneNumber: 'phoneNumber',
  hospitalChair: 'hospitalChair',
  registrationNumber: 'registrationNumber',
  directorInfo: 'directorInfo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.HospitalScalarFieldEnum = makeEnum({
  id: 'id',
  hospitalLogo: 'hospitalLogo',
  subDomain: 'subDomain',
  phoneNumber: 'phoneNumber',
  name: 'name',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.HospitalUsersScalarFieldEnum = makeEnum({
  id: 'id',
  hospitalId: 'hospitalId',
  phoneNumber: 'phoneNumber',
  userName: 'userName',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
});

exports.Prisma.MachineScalarFieldEnum = makeEnum({
  id: 'id',
  subscriptionId: 'subscriptionId',
  machineName: 'machineName',
  machineUniqueId: 'machineUniqueId',
  registeredAt: 'registeredAt'
});

exports.Prisma.MessageScalarFieldEnum = makeEnum({
  id: 'id',
  phoneNumber: 'phoneNumber',
  message: 'message',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  hospitalId: 'hospitalId'
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
});

exports.Prisma.ProductPaymentScalarFieldEnum = makeEnum({
  id: 'id',
  paidSource: 'paidSource',
  paidAmount: 'paidAmount',
  paidDate: 'paidDate',
  additionalNote: 'additionalNote',
  productId: 'productId',
  productVariantId: 'productVariantId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paymentStatus: 'paymentStatus'
});

exports.Prisma.ProductScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  productDescription: 'productDescription',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProductVariantScalarFieldEnum = makeEnum({
  id: 'id',
  productId: 'productId',
  name: 'name',
  price: 'price',
  unit: 'unit',
  duration: 'duration',
  discount: 'discount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sits: 'sits'
});

exports.Prisma.ProfileScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  latinName: 'latinName',
  sex: 'sex',
  dob: 'dob',
  height: 'height',
  weight: 'weight',
  picture: 'picture',
  priceMin: 'priceMin',
  priceMax: 'priceMax',
  notifyEmail: 'notifyEmail',
  notifyPush: 'notifyPush',
  notifyBadge: 'notifyBadge',
  historyId: 'historyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  specialistDesc: 'specialistDesc',
  patientCode: 'patientCode',
  allowPatientAssign: 'allowPatientAssign'
});

exports.Prisma.PromoCodeScalarFieldEnum = makeEnum({
  id: 'id',
  code: 'code',
  promoImageUrl: 'promoImageUrl',
  description: 'description',
  expiryDate: 'expiryDate',
  isActive: 'isActive',
  fixedAmount: 'fixedAmount',
  percentageAmount: 'percentageAmount',
  maxUses: 'maxUses',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.QPayInvoiceScalarFieldEnum = makeEnum({
  id: 'id',
  productId: 'productId',
  productVariantId: 'productVariantId',
  invoiceData: 'invoiceData',
  userId: 'userId',
  payedDate: 'payedDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.SessionScalarFieldEnum = makeEnum({
  id: 'id',
  sid: 'sid',
  data: 'data',
  expiresAt: 'expiresAt'
});

exports.Prisma.SmsRequestAttemptScalarFieldEnum = makeEnum({
  id: 'id',
  phoneNumber: 'phoneNumber',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.SubscriptionScalarFieldEnum = makeEnum({
  id: 'id',
  startDate: 'startDate',
  endDate: 'endDate',
  totalDays: 'totalDays',
  isStart: 'isStart',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  hospitalId: 'hospitalId'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserPromoCodeScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  promoCodeId: 'promoCodeId',
  promoCodeUsedAt: 'promoCodeUsedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  emailVerified: 'emailVerified',
  passwordDigest: 'passwordDigest',
  phoneNumber: 'phoneNumber',
  phoneNumberVerified: 'phoneNumberVerified',
  role: 'role',
  inviteToken: 'inviteToken',
  isTokenUsed: 'isTokenUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  invitedBy: 'invitedBy',
  pin: 'pin',
  pinCreatedAt: 'pinCreatedAt',
  pinType: 'pinType',
  pinVerifiedAt: 'pinVerifiedAt',
  hospitalId: 'hospitalId'
});

exports.Prisma.WaitListPhoneNumberScalarFieldEnum = makeEnum({
  id: 'id',
  phoneNumber: 'phoneNumber',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});
exports.UserRole = makeEnum({
  ADMIN: 'ADMIN',
  TECHNICAL_SUPPORT: 'TECHNICAL_SUPPORT',
  HOSPITAL_OWNER: 'HOSPITAL_OWNER',
  HOSPITAL_USER: 'HOSPITAL_USER',
  USER: 'USER'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Account: 'Account',
  Profile: 'Profile',
  Session: 'Session',
  SmsRequestAttempt: 'SmsRequestAttempt',
  FileUpload: 'FileUpload',
  FirebaseToken: 'FirebaseToken',
  WaitListPhoneNumber: 'WaitListPhoneNumber',
  Hospital: 'Hospital',
  Subscription: 'Subscription',
  Machine: 'Machine',
  HospitalUsers: 'HospitalUsers',
  DatabaseConnection: 'DatabaseConnection',
  Product: 'Product',
  ProductVariant: 'ProductVariant',
  ProductPayment: 'ProductPayment',
  QPayInvoice: 'QPayInvoice',
  Message: 'Message',
  PromoCode: 'PromoCode',
  UserPromoCode: 'UserPromoCode',
  FreeTrial: 'FreeTrial'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
